{"version":3,"sources":["components/Records/ObservationComp/OptionItem.js","components/Records/ObservationComp/MainObservation.js","components/Records/ObservationComp/AdditionalObserv.js","components/Records/ObservationComp/ObservationDescription.js","components/Records/ObservationComp/Quantity.js","components/Records/ObservationComp/EnteredDate.js","components/store/selected-day.js","components/Records/ObservationForm.js","components/Records/Record.js","components/Chart/Day.js","components/Chart/EmptyDay.js","components/Chart/Chart.js","components/Chart/template.js","components/Home/Beginn.js","supabaseClient.js","App.js","index.js"],"names":["OptionItem","props","value","description","i","MainObservation","descr","elem","key","className","htmlFor","id","name","onChange","event","onSelectObservation","target","records","map","val","AdditionalObserv","style","onSelectAdditionalObserv","ObservationDescription","onSelectObservDescription","Quantity","onSelectQuantity","EnteredDate","useState","isValidDate","setIsValidDate","useEffect","isValidEntry","color","outlineColor","type","min","max","lastDate","undefined","date","onSelectDate","SelectedContext","React","createContext","isSelected","isSelectedDay","mainObservation","additionalRecords","recordingSysyten","H","M","L","VL","B","ObservationForm","context","useContext","setOnLoad","isValid","setIsValid","cycleDay","setCycleDay","observation","setObservation","additionalObserv","setAdditionalObserv","observationDescrip","setObservDescrition","setColor","quantity","setQuantity","enteredDate","setEnteredDate","display","show","setShow","addObservShow","setAddObservShow","observDescrShow","setObservDescrShow","today","Date","previousDay","prevDate","prevDateYear","parseInt","slice","prevDateMonth","prevDateDay","setUTCDate","getUTCDate","day","getDate","month","getMonth","getFullYear","onSubmit","e","preventDefault","newObserv","lastCycleDay","cycleNum","currentCycleDay","onSaveNewObserv","bool","Record","lastCycleDayNum","enteredObserv","console","log","onAddModifiedObserv","onAddNewObserv","Day","setIsSelected","myDay","onClick","getDay","backgroundColor","EmptyDay","observtionDescrip","Chart","templateDays","start","end","daysElem","dayObj","push","createDays","getSelectedDay","cycleDaysData","Beginn","handleNewCycle","onClickRender","handleCycleUpdate","supabase","createClient","process","App","showChart","setShowChart","updateDay","setUpdateDay","lastDayNum","setLastDayNum","cycle","setCycle","selectedDay","setSelectedDay","setDay","setCycleNum","getCurrentCycleNumber","a","from","select","order","ascending","data","currentCycle","getDataHandler","eq","toString","length","enteredDay","insert","single","update","match","Provider","selected","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ad92ea18.chunk.js","sourcesContent":["import React from \"react\";\n\nconst OptionItem = (props) => {\n  return (\n    <option key={props.i} value={props.value}>\n      {props.description(props.value)}\n    </option>\n  );\n};\n\nexport default OptionItem;\n","import React from \"react\";\nimport OptionItem from \"./OptionItem\";\n\nconst MainObservation = (props) => {\n  const onChangeHandler = (event) => {\n    props.onSelectObservation(event.target.value);\n  };\n\n  const descr = (elem) => {\n    for (let key in props.description) {\n      if (key === elem) {\n        return props.description[key];\n      }\n    }\n  };\n  return (\n    <div className=\"new-observation__control\">\n      <label htmlFor=\"observation\">Your observation:</label>\n      <select\n        className=\"custom-select\"\n        id=\"observation\"\n        name=\"observation\"\n        value={props.value}\n        onChange={onChangeHandler}\n      >\n        <option value=\"\"></option>\n        {props.records.map((val, i) => (\n          <OptionItem key={i} value={val} description={descr} />\n        ))}\n      </select>\n    </div>\n  );\n};\n\nexport default MainObservation;\n","import React from \"react\";\nimport OptionItem from \"./OptionItem\";\n\nconst AdditionalObserv = (props) => {\n  const onChangeHandler = (event) => {\n    props.onSelectAdditionalObserv(event.target.value);\n  };\n\n  const descr = (elem) => {\n    for (let key in props.description) {\n      if (key === elem) {\n        return props.description[key];\n      }\n    }\n  };\n\n  return (\n    <div className=\"new-observation__control\" style={props.style}>\n      <label htmlFor=\"addObserv\">Record presence of mucus:</label>\n      <select\n        className=\"custom-select\"\n        id=\"addObserv\"\n        name=\"addObserv\"\n        value={props.value}\n        onChange={onChangeHandler}\n      >\n        <option value=\"\"></option>\n        {props.records.map((val, i) => (\n          <OptionItem key={i} value={val} description={descr} />\n        ))}\n      </select>\n    </div>\n  );\n};\n\nexport default AdditionalObserv;\n","import React from \"react\";\n\nconst ObservationDescription = (props) => {\n  const onChangeHandler = (event) => {\n    props.onSelectObservDescription(event.target.value);\n  };\n  return (\n    <div className=\"new-observation__control\" style={props.style}>\n      <label htmlFor=\"observationDescr\">Describe observed mucus</label>\n      <select\n        className=\"custom-select\"\n        id=\"observationDescr\"\n        name=\"observationDescr\"\n        value={props.value}\n        onChange={onChangeHandler}\n      >\n        <option value=\"\"></option>\n        <option value=\"C\">Cloudy(white)</option>\n        <option value=\"C/K\">Cloudy/Clear</option>\n        <option value=\"G\">Gummy(gluey)</option>\n        <option value=\"K\">Clear</option>\n        <option value=\"L\">Lubricative</option>\n        <option value=\"P\">Pasty</option>\n        <option value=\"Y\">Yellow</option>\n      </select>\n    </div>\n  );\n};\n\nexport default ObservationDescription;\n","import React from \"react\";\n\nconst Quantity = (props) => {\n  const onChangeHandler = (event) => {\n    props.onSelectQuantity(event.target.value);\n  };\n  return (\n    <div className=\"new-observation__control\" style={props.style}>\n      <label htmlFor=\"quantity\">Quantity:</label>\n      <select\n        id=\"quantity\"\n        name=\"quantity\"\n        value={props.value}\n        onChange={onChangeHandler}\n      >\n        <option value=\"\"></option>\n        <option value=\"x1\">Seen only once</option>\n        <option value=\"x2\">Seen twice a day</option>\n        <option value=\"x3\">Seen three times a day</option>\n        <option value=\"AD\">Seen all day</option>\n      </select>\n    </div>\n  );\n};\n\nexport default Quantity;\n","import React, { useState, useEffect } from \"react\";\n\nconst EnteredDate = (props) => {\n  const [isValidDate, setIsValidDate] = useState(true);\n\n  const onChangeHandler = (event) => {\n    let lastDate = props.lastDate;\n    if (lastDate !== undefined) {\n      if (\n        lastDate.date === event.target.value ||\n        lastDate.date > event.target.value\n      ) {\n        setIsValidDate(false);\n      } else {\n        setIsValidDate(true);\n      }\n    }\n    props.onSelectDate(event.target.value);\n    // props.isValidEntry(isValidDate);\n  };\n\n  useEffect(() => {\n    props.isValidEntry(isValidDate);\n  }, [isValidDate, props]);\n\n  return (\n    <div className=\"new-observation__control\">\n      <label htmlFor=\"date\">Current Date: </label>\n      <input\n        style={{\n          color: !isValidDate ? \"red\" : \"black\",\n          outlineColor: !isValidDate ? \"red\" : \"\",\n        }}\n        type=\"date\"\n        min=\"2019-01-01\"\n        max=\"2026-01-01\"\n        value={props.value}\n        onChange={onChangeHandler}\n      ></input>\n      {/* {!isValidDate && <div className=\"invalid-alert\">Invalid Date</div>} */}\n    </div>\n  );\n};\n\nexport default EnteredDate;\n","import React from \"react\";\n\nconst SelectedContext = React.createContext({\n  isSelected: false,\n  isSelectedDay: \"\",\n});\n\nexport default SelectedContext;\n","import React, { useState, useEffect, Fragment, useContext } from \"react\";\nimport MainObserv from \"./ObservationComp/MainObservation\";\nimport AdditionalObserv from \"./ObservationComp/AdditionalObserv\";\nimport ObservationDescription from \"./ObservationComp/ObservationDescription\";\nimport Quantity from \"./ObservationComp/Quantity\";\nimport EnteredDate from \"./ObservationComp/EnteredDate\";\nimport SelectedContext from \"../store/selected-day\";\n\nimport \"./ObservationForm.css\";\n\nconst mainObservation = [\n  \"H\",\n  \"M\",\n  \"L\",\n  \"VL\",\n  \"B\",\n  \"0\",\n  \"2\",\n  \"2W\",\n  \"4\",\n  \"6\",\n  \"8\",\n  \"10\",\n  \"10DL\",\n  \"10SL\",\n  \"10WL\",\n];\n\nconst additionalRecords = [\n  \"0\",\n  \"2\",\n  \"2W\",\n  \"4\",\n  \"6\",\n  \"8\",\n  \"10\",\n  \"10DL\",\n  \"10SL\",\n  \"10WL\",\n];\n\n// const description = [\"C\", \"C/K\", \"G\", \"K\", \"L\", \"P\", \"Y\"];\n\nconst recordingSysyten = {\n  H: \"Heavy flow\",\n  M: \"Medium flow\",\n  L: \"Light flow\",\n  VL: \"Very light flow\",\n  B: \"Brown (or black) bleeding\",\n  0: \"Dry\",\n  2: \"Damp without lubrication\",\n  \"2W\": \"Wet without lubrication\",\n  4: \"Shiny without lubrication\",\n  6: \"Sticky(1/4 in | 0.5cm)\",\n  8: \"Tacky (1/2 - 3/4 inch | 1.0 - 2.0 cm)\",\n  10: \"Strechy (1 inch | 2.5cm or more) \",\n  \"10DL\": \"Damp with lubrication\",\n  \"10SL\": \"Shiny with lubrication\",\n  \"10WL\": \"Wet with lubrication\",\n};\n\nconst modifyDate = (date) => {};\n\nconst ObservationForm = (props) => {\n  const context = useContext(SelectedContext);\n  const [onLoad, setOnLoad] = useState(true);\n  const [isValid, setIsValid] = useState(true);\n  const [cycleDay, setCycleDay] = useState(1);\n  const [observation, setObservation] = useState(\"\");\n  const [additionalObserv, setAdditionalObserv] = useState(\"\");\n  const [observationDescrip, setObservDescrition] = useState(\"\");\n  const [color, setColor] = useState(\"\");\n  const [quantity, setQuantity] = useState(\"\");\n  const [enteredDate, setEnteredDate] = useState(\"\");\n  const [show, setShow] = useState({ display: \"none\" });\n  const [addObservShow, setAddObservShow] = useState({ display: \"none\" });\n  const [observDescrShow, setObservDescrShow] = useState({ display: \"none\" });\n\n  const observationHandler = (event) => {\n    setObservation(event);\n    // console.log(context);\n  };\n\n  const additionalObservHandler = (event) => {\n    setAdditionalObserv(event);\n  };\n\n  const observDescriptionHandler = (event) => {\n    setObservDescrition(event);\n  };\n\n  const quantityHandler = (event) => {\n    setQuantity(event);\n  };\n\n  const dateHandler = (event) => {\n    setEnteredDate(event);\n  };\n\n  const isValidEntryHandler = (bool) => {\n    if (bool === false) {\n    }\n    setIsValid(bool);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let newObserv = {};\n    if (observation && isValid && !context.isSelected) {\n      let currentCycleDay = props.lastCycleDay + 1;\n      newObserv = {\n        cycleDay: currentCycleDay,\n        color: color,\n        observation: observation,\n        additionalObserv: additionalObserv,\n        observationDescrip: observationDescrip,\n        quantity: quantity,\n        date: enteredDate,\n        cycleNum: props.currentCycleDay,\n      };\n      // date: new Date(enteredDate).toLocaleDateString(\"en-US\", {\n      //   timeZone: \"UTC\",\n      // }),\n    } else if (observation && isValid && context.isSelected) {\n      newObserv = {\n        cycleDay: cycleDay,\n        color: color,\n        observation: observation,\n        additionalObserv: additionalObserv,\n        observationDescrip: observationDescrip,\n        quantity: quantity,\n        date: enteredDate,\n        cycleNum: null,\n      };\n    }\n\n    props.onSaveNewObserv(newObserv);\n    setObservation(\"\");\n    setAdditionalObserv(\"\");\n    setObservDescrition(\"\");\n    setQuantity(\"\");\n    setEnteredDate(\"\");\n    setCycleDay(cycleDay + 1);\n    setOnLoad(false);\n  };\n\n  const modifyChartHandler = () => {\n    if (context.isSelected) {\n      setObservation(context.isSelectedDay.observation);\n      setAdditionalObserv(context.isSelectedDay.additionalObserv);\n      setObservDescrition(context.isSelectedDay.observationDescrip);\n      setQuantity(context.isSelectedDay.quantity);\n      setEnteredDate(context.isSelectedDay.date);\n      setCycleDay(context.isSelectedDay.cycleDay);\n    }\n  };\n\n  useEffect(() => {\n    modifyChartHandler();\n  }, [context]);\n\n  useEffect(() => {\n    if (observation === \"L\" || observation === \"VL\" || observation === \"B\") {\n      setAddObservShow({ display: \"block\" });\n      setShow({ display: \"block\" });\n    } else if (\n      observation === \"0\" ||\n      observation === \"2\" ||\n      observation === \"2W\" ||\n      observation === \"4\" ||\n      observation === \"10DL\" ||\n      observation === \"10SL\" ||\n      observation === \"10WL\"\n    ) {\n      setShow({ display: \"block\" });\n    } else if (\n      observation === \"6\" ||\n      observation === \"8\" ||\n      observation === \"10\"\n    ) {\n      setObservDescrShow({ display: \"block\" });\n      setShow({ display: \"block\" });\n    } else {\n      setObservDescrShow({ display: \"none\" });\n      setAddObservShow({ display: \"none\" });\n      setShow({ display: \"none\" });\n      setAdditionalObserv(\"\");\n      setObservDescrition(\"\");\n      setQuantity(\"\");\n    }\n    //cleanup function\n    return () => {\n      setAddObservShow({ display: \"none\" });\n      setObservDescrShow({ display: \"none\" });\n    };\n  }, [observation]);\n\n  useEffect(() => {\n    if (\n      observation === \"H\" ||\n      observation === \"M\" ||\n      observation === \"L\" ||\n      observation === \"VL\" ||\n      observation === \"B\"\n    ) {\n      setColor(\"#d72638\");\n    } else if (\n      observation === \"0\" ||\n      observation === \"2\" ||\n      observation === \"2W\" ||\n      observation === \"4\"\n    ) {\n      setColor(\"#436436\");\n    } else if (\n      observation === \"6\" ||\n      observation === \"8\" ||\n      observation === \"10\" ||\n      observation === \"10DL\" ||\n      observation === \"10SL\" ||\n      observation === \"10WL\"\n    ) {\n      setColor(\"#FFFFFF\");\n    }\n  }, [observation]);\n\n  useEffect(() => {\n    let today = new Date();\n\n    if (props.previousDay !== undefined) {\n      let prevDate = props.previousDay.date;\n      let prevDateYear = parseInt(prevDate.slice(0, 4));\n      let prevDateMonth = parseInt(prevDate.slice(5, 7)) - 1;\n      let prevDateDay = parseInt(prevDate.slice(-2));\n\n      today = new Date(prevDateYear, prevDateMonth, prevDateDay);\n      today.setUTCDate(today.getUTCDate() + 1);\n    }\n\n    let day = today.getDate();\n    let month = today.getMonth() + 1;\n    if (day < 10) {\n      day = \"0\" + day;\n    }\n    if (month < 10) {\n      month = \"0\" + month;\n    }\n    let date = today.getFullYear() + \"-\" + month + \"-\" + day;\n    setEnteredDate(date);\n  }, [props.previousDay]);\n\n  return (\n    <Fragment>\n      <form className=\"form-handler\" onSubmit={handleSubmit}>\n        <div className=\"new-observation__controls\">\n          <MainObserv\n            records={mainObservation}\n            description={recordingSysyten}\n            value={observation}\n            onSelectObservation={observationHandler}\n          />\n          <AdditionalObserv\n            records={additionalRecords}\n            description={recordingSysyten}\n            style={addObservShow}\n            value={additionalObserv}\n            onSelectAdditionalObserv={additionalObservHandler}\n          />\n          <ObservationDescription\n            style={observDescrShow}\n            value={observationDescrip}\n            onSelectObservDescription={observDescriptionHandler}\n          />\n          <Quantity\n            style={show}\n            value={quantity}\n            onSelectQuantity={quantityHandler}\n          />\n          <EnteredDate\n            lastDate={props.previousDay}\n            isValidEntry={isValidEntryHandler}\n            value={enteredDate}\n            onSelectDate={dateHandler}\n          />\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n      {/* <button className=\"modify-btn\" onClick={modifyChartHandler}>\n        Update date\n      </button> */}\n    </Fragment>\n  );\n};\n\nexport default ObservationForm;\n","import React, { useContext } from \"react\";\nimport ObservationForm from \"./ObservationForm\";\nimport SelectedContext from \"../store/selected-day\";\n\nimport \"./Record.css\";\n\nconst Record = (props) => {\n  const context = useContext(SelectedContext);\n\n  const saveNewObservHandler = (enteredObserv) => {\n    console.log(\"record\", enteredObserv, context.isSelected);\n    if (context.isSelected) {\n      props.onAddModifiedObserv(enteredObserv);\n    } else {\n      props.onAddNewObserv(enteredObserv);\n    }\n  };\n\n  return (\n    <div className=\"new-observation\">\n      <ObservationForm\n        previousDay={props.previousDay}\n        lastCycleDay={props.lastCycleDayNum}\n        onSaveNewObserv={saveNewObservHandler}\n      />\n    </div>\n  );\n};\n\nexport default Record;\n","import React, { useState } from \"react\";\n\nconst Day = (props) => {\n  const [isSelected, setIsSelected] = useState(false);\n\n  const {\n    id,\n    cycleDay,\n    color,\n    observation,\n    additionalObserv,\n    observationDescrip,\n    quantity,\n    date,\n  } = props.myDay;\n\n  const handleClick = (event) => {\n    if (!isSelected) {\n      props.getDay(props.myDay);\n      // props.event(event.target.className);\n      setIsSelected(true);\n    } else {\n      setIsSelected(false);\n    }\n  };\n\n  // props.getTempData(props.myDay);\n  return (\n    <div\n      className={`single-day ${isSelected ? \"selected\" : \"\"}`}\n      onClick={handleClick}\n    >\n      <div className=\"cycle-day\">{cycleDay}</div>\n      <div className=\"color\" style={{ backgroundColor: color }}></div>\n      <div className=\"observation-collection\">\n        <div className=\"observation-elem\">{observation}</div>\n        <div className=\"observation-elem\">{additionalObserv}</div>\n        <div className=\"observation-elem\">{observationDescrip}</div>\n        <div className=\"observation-elem\">{quantity}</div>\n      </div>\n      <div className=\"date\">{date}</div>\n    </div>\n  );\n};\n\nexport default Day;\n","import React from \"react\";\n\nconst EmptyDay = (props) => {\n  const {\n    cycleDay,\n    color,\n    observation,\n    additionalObserv,\n    observtionDescrip,\n    quantity,\n    date,\n  } = props.day;\n\n  return (\n    <div className=\"single-day\">\n      <div className=\"cycle-day\">{cycleDay}</div>\n      <div className=\"color\">{color}</div>\n      <div className=\"observation-collection\">\n        <div className=\"observation-elem\">{observation}</div>\n        <div className=\"observation-elem\">{additionalObserv}</div>\n        <div className=\"observation-elem\">{observtionDescrip}</div>\n        <div className=\"observation-elem\">{quantity}</div>\n      </div>\n      <div className=\"date\">{date}</div>\n    </div>\n  );\n};\n\nexport default EmptyDay;\n","import React from \"react\";\nimport Day from \"./Day\";\nimport EmptyDay from \"./EmptyDay\";\nimport { createDays } from \"./template.js\";\n\nfunction Chart(props) {\n  const templateDays = createDays(props.lastCycleDay, 35);\n\n  const getDay = (day) => {\n    props.getSelectedDay(day);\n  };\n\n  return (\n    <section className=\"chart\">\n      {props.cycleDaysData.map((myDay) => {\n        return <Day key={myDay.id} myDay={myDay} getDay={getDay} />;\n      })}\n      {templateDays.map((day) => {\n        return <EmptyDay key={day.cycleDay} day={day} />;\n      })}\n    </section>\n  );\n}\n\nexport default Chart;\n","import React from \"react\";\n\nfunction createDays(start, end) {\n  let daysElem = [];\n  for (let i = start + 1; i <= end; i++) {\n    let dayObj = {\n      cycleDay: i,\n      color: \"\",\n      observation: \"\",\n      additionalObserv: \"\",\n      observationDescrip: \"\",\n      quantity: \"\",\n      date: \"\",\n    };\n    daysElem.push(dayObj);\n  }\n  return daysElem;\n}\n\nexport { createDays };\n","import React from \"react\";\nimport \"./Beginn.css\";\n\nconst Beginn = (props) => {\n  const startNew = () => {\n    props.handleNewCycle();\n    props.onClickRender();\n  };\n\n  const updateCurrent = () => {\n    props.handleCycleUpdate();\n    props.onClickRender();\n  };\n  return (\n    <div className=\"container\">\n      <div id=\"wlc-message\">Hello &#10084;</div>\n      <div id=\"wlc-page-btn\" onClick={startNew}>\n        Start new cycle\n      </div>\n      <div id=\"wlc-page-btn\" onClick={updateCurrent}>\n        Update current cycle\n      </div>\n    </div>\n  );\n};\n\nexport default Beginn;\n","import { createClient } from \"@supabase/supabase-js\";\n\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n","import React, { useState, useEffect } from \"react\";\nimport Record from \"./components/Records/Record\";\nimport Chart from \"./components/Chart/Chart\";\nimport Beginn from \"./components/Home/Beginn\";\nimport SelectedContext from \"./components/store/selected-day\";\nimport { supabase } from \"./supabaseClient\";\nimport \"./components/Chart/Chart.css\";\n\nconst dayObj = {\n  cycleDay: 0,\n  color: \"\",\n  observation: \"\",\n  additionalObserv: \"\",\n  observationDescrip: \"\",\n  quantity: \"\",\n  date: \"\",\n};\n\nconst App = () => {\n  const [showChart, setShowChart] = useState(false);\n  const [updateDay, setUpdateDay] = useState(false);\n  const [lastDayNum, setLastDayNum] = useState(\"\");\n  const [cycle, setCycle] = useState([]);\n  const [selectedDay, setSelectedDay] = useState(\"\");\n  const [day, setDay] = useState(dayObj);\n  const [cycleNum, setCycleNum] = useState(0);\n\n  async function getCurrentCycleNumber() {\n    const { data } = await supabase\n      .from(\"observations\")\n      .select(\"cycleNum\")\n      .order(\"cycleNum\", { ascending: false });\n\n    let currentCycle = data[0].cycleNum;\n    setCycleNum(currentCycle);\n  }\n\n  async function getDataHandler() {\n    const { data } = await supabase\n      .from(\"observations\")\n      .select(\"*\")\n      .eq(\"cycleNum\", cycleNum.toString())\n      .order(\"id\");\n\n    const previousDay = data[data.length - 1];\n    if (previousDay === undefined) {\n      setLastDayNum(0);\n      setDay(dayObj);\n    } else {\n      let lastCycleDay = previousDay.cycleDay;\n      setLastDayNum(lastCycleDay);\n      setCycleNum(previousDay.cycleNum);\n    }\n    setDay(previousDay);\n    setCycle(data);\n  }\n\n  async function updateDataHandler(enteredDay) {\n    await supabase\n      .from(\"observations\")\n      .insert([\n        {\n          cycleDay: enteredDay.cycleDay,\n          color: enteredDay.color,\n          observation: enteredDay.observation,\n          additionalObserv: enteredDay.additionalObserv,\n          observationDescrip: enteredDay.observationDescrip,\n          quantity: enteredDay.quantity,\n          date: enteredDay.date,\n          cycleNum: cycleNum,\n        },\n      ])\n      .single();\n    setDay(dayObj);\n    getDataHandler();\n  }\n\n  async function modifyDayHandler(enteredDay) {\n    await supabase\n      .from(\"observations\")\n      .update({\n        cycleDay: enteredDay.cycleDay,\n        color: enteredDay.color,\n        observation: enteredDay.observation,\n        additionalObserv: enteredDay.additionalObserv,\n        observationDescrip: enteredDay.observationDescrip,\n        quantity: enteredDay.quantity,\n        date: enteredDay.date,\n      })\n      .match({\n        id: selectedDay.id,\n      });\n    setDay(dayObj);\n    getDataHandler();\n  }\n\n  const getSelectedDay = (selected) => {\n    setSelectedDay(selected);\n    setUpdateDay(true);\n    getDataHandler();\n  };\n\n  const startNewCycle = () => {\n    let currentCycleNum = cycleNum + 1;\n    setCycleNum(currentCycleNum);\n    setLastDayNum(0);\n    setCycle([]);\n  };\n\n  const updateCycle = () => {\n    getCurrentCycleNumber();\n    getDataHandler();\n  };\n\n  const renderChart = () => {\n    setShowChart(true);\n  };\n\n  useEffect(() => {\n    getCurrentCycleNumber();\n    getDataHandler();\n  }, []);\n\n  return (\n    <SelectedContext.Provider\n      value={{\n        isSelected: updateDay,\n        isSelectedDay: selectedDay,\n      }}\n    >\n      {!showChart && (\n        <Beginn\n          onClickRender={renderChart}\n          handleNewCycle={startNewCycle}\n          handleCycleUpdate={updateCycle}\n        ></Beginn>\n      )}\n      {showChart && (\n        <div>\n          <Record\n            lastCycleDayNum={lastDayNum}\n            previousDay={day}\n            onAddNewObserv={updateDataHandler}\n            onAddModifiedObserv={modifyDayHandler}\n          />\n          <Chart\n            getSelectedDay={getSelectedDay}\n            cycleDaysData={cycle}\n            lastCycleDay={lastDayNum}\n          />\n        </div>\n      )}\n    </SelectedContext.Provider>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}